---
import { ViewTransitions } from "astro:transitions";

export interface Props {
  title?: string;
  description?: string;
  imageUrl?: string;
  url?: string;
  article?: boolean;
}

const { article } = Astro.props;
const description = Astro.props.description || "yanosea";
const imageUrl = Astro.props.imageUrl || process.env.GITHUB_AVATAR_URL;
const title = Astro.props.title ? `${Astro.props.title} | yanosea` : "yanosea";
const url = new URL(Astro.props.url || "", "https://yanosea.org/").toString();
---

<!doctype html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <meta name="image" content={imageUrl} />
    <meta property="og:url" content={url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta
      data-pagefind-default-meta="image[content]"
      property="og:image"
      content={imageUrl}
    />
    <meta
      name="twitter:card"
      content={article ? "summary_large_image" : "summary"}
    />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={imageUrl} />
    <ViewTransitions fallback="swap" />
    <script
      type="text/partytown"
      src="https://www.googletagmanager.com/gtag/js?id=G-SDLQKC1YPM"></script>
    <script type="text/partytown">
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", "G-SDLQKC1YPM");
    </script>
  </head>
  <body
    class="min-h-screen font-default font-normal text-main dark:text-main-dark bg-background dark:bg-background-dark"
  >
    <script is:inline>
      (function () {
        var storageKey = "currentTheme";
        var classNameDark = "dark";

        var preferDarkQuery = "(prefers-color-scheme: dark)";
        var mql = window.matchMedia(preferDarkQuery);
        var supportsColorSchemeQuery = mql.media === preferDarkQuery;
        var localStorageTheme = null;
        try {
          localStorageTheme = localStorage.getItem(storageKey);
        } catch (err) {}
        var localStorageExists = localStorageTheme !== null;

        if (localStorageExists) {
          if (localStorageTheme === classNameDark) {
            setClassOnDocumentBody();
          }
        } else if (supportsColorSchemeQuery) {
          setClassOnDocumentBody();
          localStorage.setItem(storageKey, classNameDark);
        }

        function setClassOnDocumentBody() {
          var html = document.getElementsByTagName("html")[0];
          html.classList.add(classNameDark);
        }
      })();
    </script>
    <slot />
    <style>
      @font-face {
        font-family: "MaruMonica";
        src: url("/fonts/x12y16pxMaruMonica.woff2") format("woff2");
        font-weight: normal;
        font-style: normal;
        font-display: swap;
      }
      @font-face {
        font-family: "PlemolJP";
        src: url("/fonts/PlemolJPConsoleNF.woff2") format("woff2");
        font-weight: normal;
        font-style: normal;
        font-display: swap;
        size-adjust: 75%;
      }
    </style>
  </body>
</html>
